{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useMemo } from \"react\";\nexport const useFetch = function (apiPath) {\n  _s();\n  let queryTerm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true); // Manage loading state\n  const [error, setError] = useState(null); // Manage error state\n  const apiKey = \"47edbe810731dc15c1339516c498c485\";\n\n  // Construct the base URL dynamically using apiPath, queryTerm, and page\n  const url = useMemo(() => {\n    return queryTerm ? `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${queryTerm}&language=en-US&page=${page}` : `https://api.themoviedb.org/3/movie/${apiPath}?api_key=${apiKey}&language=en-US&page=${page}`;\n  }, [apiPath, queryTerm, page]);\n  useEffect(() => {\n    async function fetchMovies() {\n      setLoading(true);\n      setError(null); // Reset error state on new fetch\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch data\");\n        }\n        const json = await response.json();\n        setData(json.results);\n      } catch (error) {\n        setError(error.message);\n        console.error(\"Error fetching movies:\", error);\n      } finally {\n        setLoading(false); // Set loading to false after fetch is complete\n      }\n    }\n    fetchMovies();\n  }, [url]); // Re-fetch when the URL changes\n\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFetch, \"fuIYpLIEfIEaGYsIl8I7fB1nCO8=\");","map":{"version":3,"names":["useState","useEffect","useMemo","useFetch","apiPath","_s","queryTerm","arguments","length","undefined","page","data","setData","loading","setLoading","error","setError","apiKey","url","fetchMovies","response","fetch","ok","Error","json","results","message","console"],"sources":["C:/Users/DELL/OneDrive/Desktop/ReactProject/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\r\n\r\nexport const useFetch = (apiPath, queryTerm = \"\", page = 1) => {\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true); // Manage loading state\r\n    const [error, setError] = useState(null); // Manage error state\r\n    const apiKey = \"47edbe810731dc15c1339516c498c485\";\r\n\r\n    // Construct the base URL dynamically using apiPath, queryTerm, and page\r\n    const url = useMemo(() => {\r\n        return queryTerm\r\n            ? `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${queryTerm}&language=en-US&page=${page}`\r\n            : `https://api.themoviedb.org/3/movie/${apiPath}?api_key=${apiKey}&language=en-US&page=${page}`;\r\n    }, [apiPath, queryTerm, page]);\r\n\r\n    useEffect(() => {\r\n        async function fetchMovies() {\r\n            setLoading(true);\r\n            setError(null); // Reset error state on new fetch\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch data\");\r\n                }\r\n                const json = await response.json();\r\n                setData(json.results);\r\n            } catch (error) {\r\n                setError(error.message);\r\n                console.error(\"Error fetching movies:\", error);\r\n            } finally {\r\n                setLoading(false); // Set loading to false after fetch is complete\r\n            }\r\n        }\r\n\r\n        fetchMovies();\r\n    }, [url]); // Re-fetch when the URL changes\r\n\r\n    return { data, loading, error };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAEpD,OAAO,MAAMC,QAAQ,GAAG,SAAAA,CAACC,OAAO,EAA+B;EAAAC,EAAA;EAAA,IAA7BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACtD,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAMiB,MAAM,GAAG,kCAAkC;;EAEjD;EACA,MAAMC,GAAG,GAAGhB,OAAO,CAAC,MAAM;IACtB,OAAOI,SAAS,GACV,qDAAqDW,MAAM,UAAUX,SAAS,wBAAwBI,IAAI,EAAE,GAC5G,sCAAsCN,OAAO,YAAYa,MAAM,wBAAwBP,IAAI,EAAE;EACvG,CAAC,EAAE,CAACN,OAAO,EAAEE,SAAS,EAAEI,IAAI,CAAC,CAAC;EAE9BT,SAAS,CAAC,MAAM;IACZ,eAAekB,WAAWA,CAAA,EAAG;MACzBL,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAChB,IAAI;QACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;QACjC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QAC3C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCZ,OAAO,CAACY,IAAI,CAACC,OAAO,CAAC;MACzB,CAAC,CAAC,OAAOV,KAAK,EAAE;QACZC,QAAQ,CAACD,KAAK,CAACW,OAAO,CAAC;QACvBC,OAAO,CAACZ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD,CAAC,SAAS;QACND,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB;IACJ;IAEAK,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACD,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEX,OAAO;IAAEP,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACnC,CAAC;AAACV,EAAA,CApCWF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}