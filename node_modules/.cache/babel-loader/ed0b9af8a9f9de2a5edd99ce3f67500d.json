{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nexport const useFetch = function (apiPath) {\n  _s();\n  let queryTerm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  const [data, setData] = useState([]);\n  const apiKey = \"47edbe810731dc15c1339516c498c485\";\n\n  // Construct the base URL dynamically using apiPath and queryTerm\n  const url = queryTerm ? `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${queryTerm}&language=en-US&page=1` : `https://api.themoviedb.org/3/movie/${apiPath}?api_key=${apiKey}&language=en-US&page=1`;\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch data\");\n        }\n        const json = await response.json();\n        setData(json.results);\n      } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n      }\n    }\n    fetchMovies();\n  }, [url]);\n  return {\n    data\n  };\n};\n_s(useFetch, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");","map":{"version":3,"names":["useState","useEffect","useFetch","apiPath","_s","queryTerm","arguments","length","undefined","data","setData","apiKey","url","fetchMovies","response","fetch","ok","Error","json","results","error","console"],"sources":["C:/Users/DELL/OneDrive/Desktop/ReactProject/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (apiPath, queryTerm = \"\") => {\r\n    const [data, setData] = useState([]);\r\n    const apiKey = \"47edbe810731dc15c1339516c498c485\";\r\n    \r\n    // Construct the base URL dynamically using apiPath and queryTerm\r\n    const url = queryTerm\r\n        ? `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${queryTerm}&language=en-US&page=1`\r\n        : `https://api.themoviedb.org/3/movie/${apiPath}?api_key=${apiKey}&language=en-US&page=1`;\r\n\r\n    useEffect(() => {\r\n        async function fetchMovies() {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch data\");\r\n                }\r\n                const json = await response.json();\r\n                setData(json.results);\r\n            } catch (error) {\r\n                console.error(\"Error fetching movies:\", error);\r\n            }\r\n        }\r\n\r\n        fetchMovies();\r\n    }, [url]);\r\n\r\n    return { data };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,QAAQ,GAAG,SAAAA,CAACC,OAAO,EAAqB;EAAAC,EAAA;EAAA,IAAnBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAC5C,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMW,MAAM,GAAG,kCAAkC;;EAEjD;EACA,MAAMC,GAAG,GAAGP,SAAS,GACf,qDAAqDM,MAAM,UAAUN,SAAS,wBAAwB,GACtG,sCAAsCF,OAAO,YAAYQ,MAAM,wBAAwB;EAE7FV,SAAS,CAAC,MAAM;IACZ,eAAeY,WAAWA,CAAA,EAAG;MACzB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;QACjC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QAC3C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCR,OAAO,CAACQ,IAAI,CAACC,OAAO,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ;IAEAP,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACD,GAAG,CAAC,CAAC;EAET,OAAO;IAAEH;EAAK,CAAC;AACnB,CAAC;AAACL,EAAA,CA3BWF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}